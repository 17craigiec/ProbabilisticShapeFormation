PI = 3.14159

map = { .0 = { .1 = { .69.82 = 1.65}, .2 = { .139.48 = 1.63}, .3 = { .158.69 = 1.28}, .4 = { .150.29 = 0.95}, .5 = { .121.69 = 0.68}, .6 = { .87.01 = 1.01}}, .1 = { .0 = { .69.82 = -1.49}, .2 = { .69.67 = 1.62}, .3 = { .97.01 = 1.01}, .4 = { .106.77 = 0.52}, .5 = { .100.26 = 0.07}, .6 = { .52.15 = 0.08}}, .2 = { .0 = { .139.48 = -1.51}, .1 = { .69.67 = -1.52}, .3 = { .55.89 = 0.23}, .4 = { .97.46 = -0.17}, .5 = { .120.60 = -0.54}, .6 = { .85.73 = -0.87}}, .3 = { .0 = { .158.69 = -1.86}, .1 = { .97.01 = -2.13}, .2 = { .55.89 = -2.91}, .4 = { .51.06 = -0.62}, .5 = { .89.65 = -1.00}, .6 = { .78.40 = -1.56}}, .4 = { .0 = { .150.29 = -2.19}, .1 = { .106.77 = -2.62}, .2 = { .97.46 = 2.97}, .3 = { .51.06 = 2.52}, .5 = { .46.16 = -1.41}, .6 = { .63.61 = -2.27}}, .5 = { .0 = { .121.69 = -2.46}, .1 = { .100.26 = -3.07}, .2 = { .120.60 = 2.60}, .3 = { .89.65 = 2.15}, .4 = { .46.16 = 1.73}, .6 = { .48.11 = -3.08}}, .6 = { .0 = { .87.01 = -2.13}, .1 = { .52.15 = -3.06}, .2 = { .85.73 = 2.27}, .3 = { .78.40 = 1.58}, .4 = { .63.61 = 0.87}, .5 = { .48.11 = 0.07}}}

# Subtracts Vector 1 from Vector 0
function subVectors(theta_0, d_0, theta_1, d_1) {
	x_sub = d_0*math.cos(theta_0) - d_1*math.cos(theta_1)
	y_sub = d_0*math.sin(theta_0) - d_1*math.sin(theta_1)
	vect = {}
	vect.x = x_sub
	vect.y = y_sub
	vect.mag = ((x_sub^2) + (y_sub^2))^0.5	
	return vect
}

function drawGlobalLine(r,g,b, x,y) {
	cur_heading = pose.orientation.yaw
	x_print = x*math.cos(-cur_heading) - y*math.sin(-cur_heading)
	y_print = x*math.sin(-cur_heading) + y*math.cos(-cur_heading)
	debug.rays.add(r,g,b,0.0,0.0,0.1, x_print, y_print, 0.1 )
}

#
# Find the distance between two angles
#
function delta_angle(angle_1, angle_2) {
	d = angle_1 - angle_2
	return math.abs((d + PI) % (2*PI) - PI)
}

#
# Get the confidence of a given measured angle vs a confidence angle
#
ALPHA = 20 # Steepness
BETA = PI/8 # 50% value: range from 0 to PI

function get_confidence(map_vector, measured_vector){
	delta = delta_angle(map_vector.a, measured_vector.theta)
	confidence = 1/(1 + math.exp(ALPHA*(delta-BETA)))

	return confidence
}

function table_copy(t) {
  var t2 = {}
  foreach(t, function(key, value) {
      t2[key] = value
    })
  return t2
}

#
# Function returns a confidence map
#
function get_confidence_map(blocked_ids){

	confidence_map = {}

	# Evaluate the confidence of the robot for each point in the map normalized from [0, 1]
	foreach(map, function(point, map_edges){

		if(blocked_ids[point] == 0){
			confidence_map[point] = get_confidence(map_target_vectors[point], cur_avg_vector)
		} else {
			confidence_map[point] = 0
		}

	})

	# Normalize total probabilities from 0 to 1
	total = 0
	foreach(confidence_map, function(point, value){
		total = total + value
	})

	if (total > 0){
		foreach(confidence_map, function(point, value){
			confidence_map[point] = value/total
		})
	}

	return confidence_map

}

function init() {
	math.rng.setseed(id)

	target_goal = math.rng.uniform(size(map))

	blocked_ids = {}

  reset()
	map_target_vectors = {}

	foreach(map, function(point, list){
		avg_ndistance = 0.0
		avg_nangle = 0.0 
		avg_nangle_sin = 0.0
		avg_nangle_cos = 0.0
		index = 0.0
		foreach(list, function(neighbor, innerTable) {
			index = index + 1.0
			foreach(innerTable, function(distance, angle){
			avg_ndistance = avg_ndistance + distance
			avg_nangle_sin = avg_nangle_sin + math.sin(angle)
			avg_nangle_cos = avg_nangle_cos + math.cos(angle)
			})
		})
		avg_ndistance = avg_ndistance/index
		avg_nangle_sin = avg_nangle_sin/index
		avg_nangle_cos = avg_nangle_cos/index

		avg_nangle = math.atan(avg_nangle_sin, avg_nangle_cos)
		map_target_vectors[point] = {.d = avg_ndistance, .a = avg_nangle}

		blocked_ids[point] = 0
	}) 
}

function step() {

	cur_heading = pose.orientation.yaw
	obst = reduce(proximity,
		function(idx,sensor,sofar) {
			return {
				.x = sofar.x + sensor.value * math.cos(sensor.angle),
				.y = sofar.y + sensor.value * math.sin(sensor.angle)
			}}, { .x = 0.0, .y = 0.0 })

	min_neighbor_distance = 9999

	if (neighbors.count() > 0){
	avg_distance = 0.0
	avg_angle = 0.0
	avg_angle_sin = 0.0
	avg_angle_cos = 0.0
	i = 0.0
	neighbors.foreach(
  	function(rid, data) {
			 i = i + 1
       avg_distance = avg_distance + data.distance
			 avg_angle_sin = avg_angle_sin + math.sin(data.azimuth)
			 avg_angle_cos = avg_angle_cos + math.cos(data.azimuth)
			 if(data.distance < min_neighbor_distance) {
			 		min_neighbor_distance = data.distance
			 }
 		})
	avg_distance = avg_distance/i
	avg_angle = math.atan(avg_angle_sin/i, avg_angle_cos/i)
	tmp_cur_x = avg_distance*math.cos(avg_angle)
	tmp_cur_y = avg_distance*math.sin(avg_angle)

	cur_avg_vector = {}
	cur_avg_vector.x = tmp_cur_x*math.cos(cur_heading) - tmp_cur_y*math.sin(cur_heading)
	cur_avg_vector.y = tmp_cur_x*math.sin(cur_heading) + tmp_cur_y*math.cos(cur_heading)
	cur_avg_vector.mag = ((cur_avg_vector.x)^2+(cur_avg_vector.y)^2)^0.5
	cur_avg_vector.theta = math.atan(cur_avg_vector.y,cur_avg_vector.x)

	#debug.print(cur_heading*180/PI)
	drawGlobalLine(205,50,0, cur_avg_vector.x/100,cur_avg_vector.y/100)

	correction_vectors = {}	
	foreach(map_target_vectors,
  	function(rid, innerTable) {
			correction_vectors[rid] = subVectors(cur_avg_vector.theta, cur_avg_vector.mag, innerTable.a, innerTable.d)
		})

		moveWithConfidence()

		drawGlobalLine(0,205,50, correction_vectors[target_goal].x/100, correction_vectors[target_goal].y/100)
	}
}

P_switch = 0.2
P_block = 0.2
block_time = 100
block_distance = 20

function moveWithConfidence()
{

	if(min_neighbor_distance < block_distance) {
		block_chance = math.rng.uniform(1.0)
		if(block_chance < P_block) {
			blocked_ids[target_goal] = block_time
		}
	}

	decrementBlockedIdCounter()

	confidence_map = get_confidence_map(blocked_ids)

	switch_chance = math.rng.uniform(1.0)
	if(switch_chance < P_switch)
	{
		total = 0
		rng_num = math.rng.uniform(1.0)
		foreach(confidence_map, function(point, conf){
			if(total <= rng_num and rng_num < total+conf)
			{
				target_goal = point
			}
			total = total + conf
		})
	}

	confidence_vector = correction_vectors[target_goal]
	positional_error = confidence_vector.mag
	
	nate_move(confidence_vector.x, confidence_vector.y)

	debug.print(target_goal)
}


function decrementBlockedIdCounter()
{
	foreach(blocked_ids,
  	function(id, counter) {
			if(counter > 0) {
				blocked_ids[id] = blocked_ids[id] - 1
			}
	})
}

av_f = 200
function nate_move(x,y){

	x_val = x*math.cos(pose.orientation.yaw) + y*math.sin(pose.orientation.yaw)
	y_val = -x*math.sin(pose.orientation.yaw) + y*math.cos(pose.orientation.yaw)

	gotoc(x_val - av_f*obst.x, y_val - av_f*obst.y)

}


#
# Executed once upon resetting
#
function reset() {

}

#
# Executed once upon closing ARGoS
#
function destroy() {
  # Nothing to do
}

